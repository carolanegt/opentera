{"version":3,"file":"translator.min.js","sources":["../../src/utils.js","../../src/translator.js"],"sourcesContent":["const CONSOLE_MESSAGES = {\n  INVALID_PARAM_LANGUAGE: (param) =>\n    `Invalid parameter for \\`language\\` provided. Expected a string, but got ${typeof param}.`,\n  INVALID_PARAM_JSON: (param) =>\n    `Invalid parameter for \\`json\\` provided. Expected an object, but got ${typeof param}.`,\n  EMPTY_PARAM_LANGUAGE: () =>\n    `The parameter for \\`language\\` can't be an empty string.`,\n  EMPTY_PARAM_JSON: () =>\n    `The parameter for \\`json\\` must have at least one key/value pair.`,\n  INVALID_PARAM_KEY: (param) =>\n    `Invalid parameter for \\`key\\` provided. Expected a string, but got ${typeof param}.`,\n  NO_LANGUAGE_REGISTERED: (language) =>\n    `No translation for language \"${language}\" has been added, yet. Make sure to register that language using the \\`.add()\\` method first.`,\n  TRANSLATION_NOT_FOUND: (key, language) =>\n    `No translation found for key \"${key}\" in language \"${language}\". Is there a key/value in your translation file?`,\n  INVALID_PARAMETER_SOURCES: (param) =>\n    `Invalid parameter for \\`sources\\` provided. Expected either a string or an array, but got ${typeof param}.`,\n  FETCH_ERROR: (response) =>\n    `Could not fetch \"${response.url}\": ${response.status} (${response.statusText})`,\n  INVALID_ENVIRONMENT: () =>\n    `You are trying to execute the method \\`translatePageTo()\\`, which is only available in the browser. Your environment is most likely Node.js`,\n  MODULE_NOT_FOUND: (message) => message,\n  MISMATCHING_ATTRIBUTES: (keys, attributes, element) =>\n    `The attributes \"data-i18n\" and \"data-i18n-attr\" must contain the same number of keys.\n\nValues in \\`data-i18n\\`:      (${keys.length}) \\`${keys.join(' ')}\\`\nValues in \\`data-i18n-attr\\`: (${attributes.length}) \\`${attributes.join(' ')}\\`\n\nThe HTML element is:\n${element.outerHTML}`,\n  INVALID_OPTIONS: (param) =>\n    `Invalid config passed to the \\`Translator\\` constructor. Expected an object, but got ${typeof param}. Using default config instead.`,\n};\n\n/**\n *\n * @param {Boolean} isEnabled\n * @return {Function}\n */\nexport function logger(isEnabled) {\n  return function log(code, ...args) {\n    if (isEnabled) {\n      try {\n        const message = CONSOLE_MESSAGES[code];\n        throw new TypeError(message ? message(...args) : 'Unhandled Error');\n      } catch (ex) {\n        const line = ex.stack.split(/\\n/g)[1];\n        const [method, filepath] = line.split(/@/);\n\n        console.error(`${ex.message}\n\nThis error happened in the method \\`${method}\\` from: \\`${filepath}\\`.\n\nIf you don't want to see these error messages, turn off debugging by passing \\`{ debug: false }\\` to the constructor.\n\nError code: ${code}\n\nCheck out the documentation for more details about the API:\nhttps://github.com/andreasremdt/simple-translator#usage\n        `);\n      }\n    }\n  };\n}\n","import { logger } from './utils.js';\n\n/**\n * simple-translator\n * A small JavaScript library to translate webpages into different languages.\n * https://github.com/andreasremdt/simple-translator\n *\n * Author: Andreas Remdt <me@andreasremdt.com> (https://andreasremdt.com)\n * License: MIT (https://mit-license.org/)\n */\nclass Translator {\n  /**\n   * Initialize the Translator by providing options.\n   *\n   * @param {Object} options\n   */\n  constructor(options = {}) {\n    this.debug = logger(true);\n\n    if (typeof options != 'object' || Array.isArray(options)) {\n      this.debug('INVALID_OPTIONS', options);\n      options = {};\n    }\n\n    this.languages = new Map();\n    this.config = Object.assign(Translator.defaultConfig, options);\n\n    const { debug, registerGlobally, detectLanguage } = this.config;\n\n    this.debug = logger(debug);\n\n    if (registerGlobally) {\n      this._globalObject[registerGlobally] = this.translateForKey.bind(this);\n    }\n\n    if (detectLanguage && this._env == 'browser') {\n      this._detectLanguage();\n    }\n  }\n\n  /**\n   * Return the global object, depending on the environment.\n   * If the script is executed in a browser, return the window object,\n   * otherwise, in Node.js, return the global object.\n   *\n   * @return {Object}\n   */\n  get _globalObject() {\n    if (this._env == 'browser') {\n      return window;\n    }\n\n    return global;\n  }\n\n  /**\n   * Check and return the environment in which the script is executed.\n   *\n   * @return {String} The environment\n   */\n  get _env() {\n    if (typeof window != 'undefined') {\n      return 'browser';\n    } else if (typeof module !== 'undefined' && module.exports) {\n      return 'node';\n    }\n\n    return 'browser';\n  }\n\n  /**\n   * Detect the users preferred language. If the language is stored in\n   * localStorage due to a previous interaction, use it.\n   * If no localStorage entry has been found, use the default browser language.\n   */\n  _detectLanguage() {\n    const inMemory = localStorage.getItem(this.config.persistKey);\n\n    if (inMemory) {\n      this.config.defaultLanguage = inMemory;\n    } else {\n      const lang = navigator.languages\n        ? navigator.languages[0]\n        : navigator.language;\n\n      this.config.defaultLanguage = lang.substr(0, 2);\n    }\n  }\n\n  /**\n   * Get a translated value from a JSON by providing a key. Additionally,\n   * the target language can be specified as the second parameter.\n   *\n   * @param {String} key\n   * @param {String} toLanguage\n   * @return {String}\n   */\n  _getValueFromJSON(key, toLanguage) {\n    const json = this.languages.get(toLanguage);\n\n    return key.split('.').reduce((obj, i) => (obj ? obj[i] : null), json);\n  }\n\n  /**\n   * Replace a given DOM nodes' attribute values (by default innerHTML) with\n   * the translated text.\n   *\n   * @param {HTMLElement} element\n   * @param {String} toLanguage\n   */\n  _replace(element, toLanguage) {\n    const keys = element.getAttribute('data-i18n')?.split(/\\s/g);\n    const attributes = element?.getAttribute('data-i18n-attr')?.split(/\\s/g);\n\n    if (attributes && keys.length != attributes.length) {\n      this.debug('MISMATCHING_ATTRIBUTES', keys, attributes, element);\n    }\n\n    keys.forEach((key, index) => {\n      const text = this._getValueFromJSON(key, toLanguage);\n      const attr = attributes ? attributes[index] : 'innerHTML';\n\n      if (text) {\n        if (attr == 'innerHTML') {\n          element[attr] = text;\n        } else {\n          element.setAttribute(attr, text);\n        }\n      } else {\n        this.debug('TRANSLATION_NOT_FOUND', key, toLanguage);\n      }\n    });\n  }\n\n  /**\n   * Translate all DOM nodes that match the given selector into the\n   * specified target language.\n   *\n   * @param {String} toLanguage The target language\n   */\n  translatePageTo(toLanguage = this.config.defaultLanguage) {\n    if (this._env == 'node') {\n      this.debug('INVALID_ENVIRONMENT');\n      return;\n    }\n\n    if (typeof toLanguage != 'string') {\n      this.debug('INVALID_PARAM_LANGUAGE', toLanguage);\n      return;\n    }\n\n    if (toLanguage.length == 0) {\n      this.debug('EMPTY_PARAM_LANGUAGE');\n      return;\n    }\n\n    if (!this.languages.has(toLanguage)) {\n      this.debug('NO_LANGUAGE_REGISTERED', toLanguage);\n      return;\n    }\n\n    const elements =\n      typeof this.config.selector == 'string'\n        ? Array.from(document.querySelectorAll(this.config.selector))\n        : this.config.selector;\n\n    if (elements.length && elements.length > 0) {\n      elements.forEach((element) => this._replace(element, toLanguage));\n    } else if (elements.length == undefined) {\n      this._replace(elements, toLanguage);\n    }\n\n    this._currentLanguage = toLanguage;\n    document.documentElement.lang = toLanguage;\n\n    if (this.config.persist) {\n      localStorage.setItem(this.config.persistKey, toLanguage);\n    }\n  }\n\n  /**\n   * Translate a given key into the specified language if it exists\n   * in the translation file. If not or if the language hasn't been added yet,\n   * the return value is `null`.\n   *\n   * @param {String} key The key from the language file to translate\n   * @param {String} toLanguage The target language\n   * @return {(String|null)}\n   */\n  translateForKey(key, toLanguage = this.currentLanguage) {\n    if (typeof key != 'string') {\n      this.debug('INVALID_PARAM_KEY', key);\n      return null;\n    }\n\n    if (!this.languages.has(toLanguage)) {\n      this.debug('NO_LANGUAGE_REGISTERED', toLanguage);\n      return null;\n    }\n\n    const text = this._getValueFromJSON(key, toLanguage);\n\n    if (!text) {\n      this.debug('TRANSLATION_NOT_FOUND', key, toLanguage);\n      return null;\n    }\n\n    return text;\n  }\n\n  /**\n   * Add a translation resource to the Translator object. The language\n   * can then be used to translate single keys or the entire page.\n   *\n   * @param {String} language The target language to add\n   * @param {String} json The language resource file as JSON\n   * @return {Object} Translator instance\n   */\n  add(language, json) {\n    if (typeof language != 'string') {\n      this.debug('INVALID_PARAM_LANGUAGE', language);\n      return this;\n    }\n\n    if (language.length == 0) {\n      this.debug('EMPTY_PARAM_LANGUAGE');\n      return this;\n    }\n\n    if (Array.isArray(json) || typeof json != 'object') {\n      this.debug('INVALID_PARAM_JSON', json);\n      return this;\n    }\n\n    if (Object.keys(json).length == 0) {\n      this.debug('EMPTY_PARAM_JSON');\n      return this;\n    }\n\n    this.languages.set(language, json);\n\n    return this;\n  }\n\n  /**\n   * Remove a translation resource from the Translator object. The language\n   * won't be available afterwards.\n   *\n   * @param {String} language The target language to remove\n   * @return {Object} Translator instance\n   */\n  remove(language) {\n    if (typeof language != 'string') {\n      this.debug('INVALID_PARAM_LANGUAGE', language);\n      return this;\n    }\n\n    if (language.length == 0) {\n      this.debug('EMPTY_PARAM_LANGUAGE');\n      return this;\n    }\n\n    this.languages.delete(language);\n\n    return this;\n  }\n\n  /**\n   * Fetch a translation resource from the web server. It can either fetch\n   * a single resource or an array of resources. After all resources are fetched,\n   * return a Promise.\n   * If the optional, second parameter is set to true, the fetched translations\n   * will be added to the Translator object.\n   *\n   * @param {String|Array} sources The files to fetch\n   * @param {Boolean} save Save the translation to the Translator object\n   * @return {(Promise|null)}\n   */\n  fetch(sources, save = true) {\n    if (!Array.isArray(sources) && typeof sources != 'string') {\n      this.debug('INVALID_PARAMETER_SOURCES', sources);\n      return null;\n    }\n\n    if (!Array.isArray(sources)) {\n      sources = [sources];\n    }\n\n    const urls = sources.map((source) => {\n      const filename = source.replace(/\\.json$/, '').replace(/^\\//, '');\n      const path = this.config.filesLocation.replace(/\\/$/, '');\n\n      return `${path}/${filename}.json`;\n    });\n\n    if (this._env == 'browser') {\n      return Promise.all(urls.map((url) => fetch(url)))\n        .then((responses) =>\n          Promise.all(\n            responses.map((response) => {\n              if (response.ok) {\n                return response.json();\n              }\n\n              this.debug('FETCH_ERROR', response);\n            })\n          )\n        )\n        .then((languageFiles) => {\n          // If a file could not be fetched, it will be `undefined` and filtered out.\n          languageFiles = languageFiles.filter((file) => file);\n\n          if (save) {\n            languageFiles.forEach((file, index) => {\n              this.add(sources[index], file);\n            });\n          }\n\n          return languageFiles.length > 1 ? languageFiles : languageFiles[0];\n        });\n    } else if (this._env == 'node') {\n      return new Promise((resolve) => {\n        const languageFiles = [];\n\n        urls.forEach((url, index) => {\n          try {\n            const json = JSON.parse(\n              require('fs').readFileSync(process.cwd() + url, 'utf-8')\n            );\n\n            if (save) {\n              this.add(sources[index], json);\n            }\n\n            languageFiles.push(json);\n          } catch (err) {\n            this.debug('MODULE_NOT_FOUND', err.message);\n          }\n        });\n\n        resolve(languageFiles.length > 1 ? languageFiles : languageFiles[0]);\n      });\n    }\n  }\n\n  /**\n   * Return the currently selected language.\n   *\n   * @return {String}\n   */\n  get currentLanguage() {\n    return this._currentLanguage || this.config.defaultLanguage;\n  }\n\n  /**\n   * Return the default config object whose keys can be overriden\n   * by the user's config passed to the constructor.\n   *\n   * @return {Object}\n   */\n  static get defaultConfig() {\n    return {\n      defaultLanguage: 'en',\n      detectLanguage: true,\n      selector: '[data-i18n]',\n      debug: false,\n      registerGlobally: '__',\n      persist: false,\n      persistKey: 'preferred_language',\n      filesLocation: '/i18n',\n    };\n  }\n}\n\nexport default Translator;\n"],"names":["CONSOLE_MESSAGES","INVALID_PARAM_LANGUAGE","param","INVALID_PARAM_JSON","EMPTY_PARAM_LANGUAGE","EMPTY_PARAM_JSON","INVALID_PARAM_KEY","NO_LANGUAGE_REGISTERED","language","TRANSLATION_NOT_FOUND","key","INVALID_PARAMETER_SOURCES","FETCH_ERROR","response","url","status","statusText","INVALID_ENVIRONMENT","MODULE_NOT_FOUND","message","MISMATCHING_ATTRIBUTES","keys","attributes","element","length","join","outerHTML","INVALID_OPTIONS","logger","isEnabled","code","args","TypeError","ex","line","stack","split","method","filepath","console","error","options","debug","_typeof","Array","isArray","languages","Map","config","Object","assign","Translator","defaultConfig","this","registerGlobally","detectLanguage","_globalObject","translateForKey","bind","_env","_detectLanguage","inMemory","localStorage","getItem","persistKey","defaultLanguage","lang","navigator","substr","toLanguage","json","get","reduce","obj","i","getAttribute","_element$getAttribute","_element$getAttribute2","forEach","index","text","_this","_getValueFromJSON","attr","setAttribute","has","elements","selector","from","document","querySelectorAll","_this2","_replace","undefined","_currentLanguage","documentElement","persist","setItem","currentLanguage","set","sources","save","urls","map","source","filename","replace","path","_this3","filesLocation","Promise","all","fetch","then","responses","ok","languageFiles","filter","file","add","resolve","JSON","parse","require","readFileSync","process","cwd","push","err","window","global","module","exports"],"mappings":"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"}